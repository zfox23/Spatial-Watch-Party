<script>
    // This script contains code specific to using Twilio as a video service provider.

    const Video = Twilio.Video;

    let myTwilioRoom;
    let localVideoTrack;
    let providedUserIDsToParticipantVideoContainerMap = new Map();
    async function connectToVideoService() {
        let localTracks = await Video.createLocalTracks({
            audio: false,
            video: true,
        });

        localVideoTrack = localTracks.find(track => track.kind === 'video');

        let div = document.createElement("div");
        div.classList.add("participantVideoContainer");
        div.classList.add("participantVideoContainer--mine");
        let titleBar = document.createElement("div");
        titleBar.classList.add("videoTitleBar");
        div.appendChild(titleBar);
        let videoContainer = document.createElement("div");
        videoContainer.classList.add("videoContainer");
        videoContainer.appendChild(localVideoTrack.attach());
        div.appendChild(videoContainer);
        let participantID = document.createElement("participantID");
        participantID.classList.add("participantID");
        participantID.innerHTML = myProvidedUserID;
        div.appendChild(participantID);
        providedUserIDsToParticipantVideoContainerMap.set(myProvidedUserID, allVideosContainer.appendChild(div));
        updateVideoContainerPositions();

        Video.connect('<%- twilioJWT %>', {
            name: 'hifi-videochat-twilio-test-room',
            tracks: localTracks,
        }).then(twilioRoom => {
            myTwilioRoom = twilioRoom;
            console.log('Connected to Room "%s"', myTwilioRoom.name);

            myTwilioRoom.participants.forEach(participantConnected);
            myTwilioRoom.on('participantConnected', participantConnected);

            myTwilioRoom.on('participantDisconnected', participantDisconnected);
            myTwilioRoom.once('disconnected', error => myTwilioRoom.participants.forEach(participantDisconnected));
        }, error => {
            console.error(`Unable to connect to Room: ${error.message}`);
        });

        function participantConnected(participant) {
            console.log('Participant "%s" connected', participant.identity);

            const div = document.createElement('div');
            div.id = participant.sid;
            div.classList.add("participantVideoContainer");
            div.classList.add("participantVideoContainer--other");
            
            let videoContainer = document.createElement("div");
            videoContainer.classList.add("videoContainer");

            let participantID = document.createElement("participantID");
            participantID.classList.add("participantID");
            participantID.innerHTML = participant.identity;
            div.appendChild(participantID);

            participant.on('trackSubscribed', track => trackSubscribed(videoContainer, track));
            participant.on('trackUnsubscribed', trackUnsubscribed);

            participant.tracks.forEach(publication => {
                if (publication.isSubscribed) {
                    trackSubscribed(videoContainer, publication.track);
                }
            });
            
            div.appendChild(videoContainer);

            providedUserIDsToParticipantVideoContainerMap.set(participant.identity, allVideosContainer.appendChild(div));
            updateVideoContainerPositions();
        }

        function participantDisconnected(participant) {
            console.log('Participant "%s" disconnected', participant.identity);
            document.getElementById(participant.sid).remove();

            providedUserIDsToParticipantVideoContainerMap.delete(participant.identity);
            let idx = allUserData.find((element) => { return element.providedUserID === participant.identity; })
            if (idx > -1) {
                allUserData.splice(idx, 1);
            }
            updateVideoContainerPositions();
        }

        function trackSubscribed(div, track) {
            div.appendChild(track.attach());
        }

        function trackUnsubscribed(track) {
            track.detach().forEach(element => element.remove());
        }
    }

    function disconnectFromVideoService() {
        providedUserIDsToParticipantVideoContainerMap.delete(myProvidedUserID);
        let idx = allUserData.find((element) => { return element.providedUserID === myProvidedUserID; })
        if (idx > -1) {
            allUserData.splice(idx, 1);
        }

        if (localVideoTrack) {
        const mediaElements = localVideoTrack.detach();
        mediaElements.forEach(mediaElement => mediaElement.parentNode.parentNode.remove());
        }

        if (!myTwilioRoom) {
            return;
        }

        console.log(`Disconnecting from Twilio...`);
        myTwilioRoom.disconnect();
        myTwilioRoom = null;
    }
</script>